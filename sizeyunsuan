#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_QUESTIONS 100
#define MAX_BUFFER_SIZE 1024

// 生成加法题目
int generateAddition(int maxNum, int* a, int* b) {
    *a = rand() % maxNum + 1;
    *b = rand() % maxNum + 1;
    return *a + *b;
}

// 生成减法题目
int generateSubtraction(int maxNum, int* a, int* b) {
    *a = rand() % maxNum + 1;
    *b = rand() % *a + 1;
    return *a - *b;
}

// 生成乘法题目
int generateMultiplication(int maxNum, int* a, int* b) {
    *a = rand() % maxNum + 1;
    *b = rand() % maxNum + 1;
    return *a * *b;
}

// 生成除法题目
int generateDivision(int maxNum, int* a, int* b) {
    *a = rand() % maxNum + 1;
    *b = rand() % *a + 1;
    return *a / *b;
}

int main() {
    srand(time(NULL));
    int numQuestions, maxNum;
    int operations[4] = { 0 }; // 0: +, 1: -, 2: *, 3: /
    int hasParentheses = 0, hasDecimal = 0;
    int outputMethod = 0; // 0: console, 1: file
    FILE* outputFile = NULL;

    // 获取用户设置
    printf("Enter the number of questions: ");
    scanf("%d", &numQuestions);
    printf("Enter the maximum number: ");
    scanf("%d", &maxNum);
    printf("Select operations (0: +, 1: -, 2: *, 3: /): ");
    for (int i = 0; i < 4; i++) {
        scanf("%d", &operations[i]);
    }
    printf("Include parentheses? (0: no, 1: yes) ");
    scanf("%d", &hasParentheses);
    printf("Include decimal? (0: no, 1: yes) ");
    scanf("%d", &hasDecimal);
    printf("Select output method (0: console, 1: file) ");
    scanf("%d", &outputMethod);

    if (outputMethod == 1) {
        outputFile = fopen("output.txt", "w");
        if (outputFile == NULL) {
            printf("Error opening output file.\n");
            return 1;
        }
    }

    // 生成并输出题目
    for (int i = 0; i < numQuestions; i++) {
        int a, b, result;
        int op = rand() % 4;
        while (operations[op] == 0) {
            op = rand() % 4;
        }
        switch (op) {
        case 0:
            result = generateAddition(maxNum, &a, &b);
            if (hasParentheses && rand() % 2 == 0) {
                printf("(%d + %d) = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "(%d + %d) = ?\n", a, b);
            }
            else {
                printf("%d + %d = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "%d + %d = ?\n", a, b);
            }
            break;
        case 1:
            result = generateSubtraction(maxNum, &a, &b);
            if (hasParentheses && rand() % 2 == 0) {
                printf("(%d - %d) = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "(%d - %d) = ?\n", a, b);
            }
            else {
                printf("%d - %d = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "%d - %d = ?\n", a, b);
            }
            break;
        case 2:
            result = generateMultiplication(maxNum, &a, &b);
            if (hasParentheses && rand() % 2 == 0) {
                printf("(%d * %d) = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "(%d * %d) = ?\n", a, b);
            }
            else {
                printf("%d * %d = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "%d * %d = ?\n", a, b);
            }
            break;
        case 3:
            result = generateDivision(maxNum, &a, &b);
            if (hasParentheses && rand() % 2 == 0) {
                printf("(%d / %d) = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "(%d / %d) = ?\n", a, b);
            }
            else {
                printf("%d / %d = ?\n", a, b);
                if (outputFile) fprintf(outputFile, "%d / %d = ?\n", a, b);
            }
            break;
        }
        if (hasDecimal) {
            printf("%.2f\n", (float)result);
            if (outputFile) fprintf(outputFile, "%.2f\n", (float)result);
        }
        else {
            printf("%d\n", result);
            if (outputFile) fprintf(outputFile, "%d\n", result);
        }
    }

    if (outputFile) {
        fclose(outputFile);
        printf("Output saved to file 'output.txt'.\n");
    }

    return 0;
}
