#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ctype.h> 

// 函数声明
void generateExercise(char* expression, int* result);

int main() {
    char expression[100];
    int result, userAnswer;
    char continueAnswer = 'Y';

    // 初始化随机数生成器
    srand(time(NULL));

    // 使用循环让用户可以选择继续答题
    do {
        // 生成四则运算题目
        generateExercise(expression, &result);

        // 输出题目
        printf("请计算以下题目的答案：\n%s\n", expression);

        // 用户输入答案
        printf("请输入你的答案：");
        scanf("%d", &userAnswer);
        // 清空输入缓冲区，防止读取到多余的字符
        while (getchar() != '\n');

        // 检查答案是否正确
        if (userAnswer == result) {
            printf("答案正确！\n");
        }
        else {
            printf("答案错误，正确答案是：%d\n", result);
        }

        // 询问用户是否继续答题
        printf("是否继续答题？(Y/N): ");
        scanf("%c", &continueAnswer);
        // 清空输入缓冲区
        while (getchar() != '\n');

        // 转换为小写，以便比较
        continueAnswer = tolower(continueAnswer);

    } while (continueAnswer != 'n');

    printf("感谢使用，再见！\n");

    return 0;
}

// 生成四则运算题目
void generateExercise(char* expression, int* result) {
    int a, b;
    char op;
    int randomNumber = rand() % 4; // 生成0到3的随机数

    a = rand() % 100 + 1; // 生成1到100的随机数
    b = rand() % 100 + 1; // 生成1到100的随机数

    switch (randomNumber) {
    case 0:
        op = '+';
        *result = a + b;
        break;
    case 1:
        op = '-';
        *result = a - b;
        break;
    case 2:
        op = '*';
        *result = a * b;
        break;
    case 3:
        op = '/';
        // 确保不会除以零
        do {
            b = rand() % 100 + 1;
        } while (b == 0 || a % b != 0); // 确保结果是整数
        *result = a / b;
        break;
    default:
        printf("发生错误：随机数生成器出现问题。\n");
        exit(1);
    }

    // 构造表达式字符串
    sprintf(expression, "%d %c %d = ?", a, op, b);
}

